use lookup_tables::*;
use serde::{Deserialize};
use std::path::PathBuf;

const TOL: f64 = 1e-10;

#[derive(Deserialize)]
/// Deserialize data generated by `table1d_test_cases.py`
struct Inputs1D {
    /// Clamped test cases
    clamped: Vec<TestCase>
}

#[derive(Deserialize)]
struct TestCase {
    x: Vec<f64>,
    y: Vec<f64>,
    input: Vec<f64>,
    output: Vec<f64>,
}

#[test]
fn runit() {
    let path = PathBuf::from(env!("CARGO_MANIFEST_DIR")).join("tests/lookup_table_1d_cases.json");
    let reader = std::fs::File::open(&path).unwrap();
    let cases: Inputs1D = serde_json::from_reader(reader).unwrap();

    for (idx, case) in cases.clamped.into_iter().enumerate() {
        println!("evaluating case index {idx}");

        dbg!(&case.x);
        dbg!(&case.y);

        let linear_table : LookupTable1D<Axis<f64, Linear, Clamp, Clamp>, f64> = LookupTable1D::new(case.x, Linear::default(), case.y).unwrap();
        for (input, output) in case.input.into_iter().zip(case.output.into_iter()) {
            println!("evaluating case input {input}");

            let linear_output = linear_table.lookup(&input);
            float_eq::assert_float_eq!(linear_output, output, abs <= TOL);
        }
    }
}
